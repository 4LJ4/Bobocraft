use anyhow::{bail, Error};
use serde::{Deserialize, Serialize};

#[derive(Debug, Copy, Clone, Deserialize, Serialize)]
pub struct Color {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}

impl TryFrom<u8> for Color {
    type Error = Error;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        let (r, g, b) = match value {
            0 => (255, 255, 255),
            1 => (111, 111, 111),
            2 => (255, 129, 32),
            3 => (17, 167, 253),
            4 => (0, 0, 0),
            5 => (223, 28, 2),
            6 => (254, 222, 25),
            7 => (53, 188, 28),
            8 => (236, 2, 194),
            9 => (12, 72, 251),
            10 => (151, 40, 216),
            11 => (161, 80, 26),
            12 => (175, 188, 56),
            13 => (4, 137, 64),
            14 => (237, 210, 161),
            15 => (253, 163, 193),
            16 => (224, 51, 16),
            17 => (131, 52, 34),
            18 => (128, 87, 86),
            19 => (188, 140, 152),
            20 => (199, 159, 64),
            21 => (9, 90, 43),
            22 => (73, 84, 42),
            23 => (39, 48, 63),
            24 => (14, 68, 106),
            25 => (66, 112, 200),
            26 => (88, 107, 141),
            27 => (118, 142, 190),
            28 => (138, 211, 228),
            29 => (72, 59, 103),
            30 => (201, 69, 189),
            31 => (213, 150, 242),
            _ => bail!("unable to parse color '{}'", value),
        };
        Ok(Color { r, g, b })
    }
}
